[33mcommit b4804aec254dbf787eceac7882ac6bae3e7203ee[m[33m ([m[1;36mHEAD -> [m[1;32mmain[m[33m)[m
Author: cwn <896535341@qq.com>
Date:   Sat Jul 5 16:17:48 2025 +0800

    1.为rename子命令添加move_to功能
    2.修复了rename子命令的一些bug
    3.为rename子命令添加了更多错误提示

[1mdiff --git a/demand.typ b/demand.typ[m
[1mindex da17473..3b92525 100644[m
[1m--- a/demand.typ[m
[1m+++ b/demand.typ[m
[36m@@ -40,4 +40,9 @@[m
   - 支持文件搜索、文件比较、批量重命名[m
   - 支持预览文本文件，并且支持高亮显示 done[m
   - 支持文件大小显示 done[m
[31m-    [m
\ No newline at end of file[m
[32m+[m[41m[m
[32m+[m[32mtodo:[m[41m[m
[32m+[m[32m替换功能，撤销功能，递归深度，文本重命名功能（左边源文件名，右边新文件名），[m[41m[m
[32m+[m[32m移动到新文件夹功能，修正序号功能（(1)(1)(1)-＞(3)），类似makefile的一键自动化重命名功能，[m[41m[m
[32m+[m[32m添加中文、罗马等多种序号的功能，target中匹配不到变量就返回源字符，高亮显示区分匹配到的模板变量，[m[41m[m
[32m+[m[32m配对文件同步重命名，文件名合法性检测（长度、字符），支持更多模板变量的运算如取字符长度等[m
\ No newline at end of file[m
[1mdiff --git a/src/main.rs b/src/main.rs[m
[1mindex e35c673..a135bad 100644[m
[1m--- a/src/main.rs[m
[1m+++ b/src/main.rs[m
[36m@@ -21,7 +21,7 @@[m [muse crate::ls::ls_command;[m
 #[command(author, version, about, long_about = None)][m
 struct Args {[m
     /// 要列出内容的目录路径，默认为当前目录[m
[31m-    /// todo: - 是文件夹，*是可执行文件，[m
[32m+[m[32m    // // todo: - 是文件夹，*是可执行文件，[m
     #[arg(default_value = ".")][m
     directory: PathBuf,[m
 [m
[36m@@ -30,7 +30,6 @@[m [mstruct Args {[m
     author: bool,[m
 [m
     /// 显示详细信息[m
[31m-    ///[m
     /// 显示的条目：permission, modified, file_name, size[m
     #[arg(short, long)][m
     long: bool,[m
[36m@@ -285,6 +284,28 @@[m [menum SubCommands {[m
         /// 开启通配符功能[m
         #[arg(short, long, default_value_t = false)][m
         wildcard: bool,[m
[32m+[m
[32m+[m[32m        /// 开启替换功能，和普通的搜索替换功能一致[m
[32m+[m[32m        #[arg(short = 'R', long, default_value_t = false)][m
[32m+[m[32m        replace: bool,[m
[32m+[m
[32m+[m[32m        // /// 递归深度，默认为1[m
[32m+[m[32m        // #[arg(short = 'd', long, default_value_t = 1)][m
[32m+[m[32m        // recursive_depth: usize,[m
[32m+[m
[32m+[m[32m        /// 重命名后移动到新文件夹[m
[32m+[m[32m        #[arg(short = 'm', long)][m
[32m+[m[32m        move_to: Option<String>,[m
[32m+[m
[32m+[m[32m        // /// 重命名后复制到新文件夹[m
[32m+[m[32m        // #[arg(short = 'c', long)][m
[32m+[m[32m        // copy_to: Option<String>,[m
[32m+[m
[32m+[m[32m        /// 显示详细信息，如变量对应的实际值等[m
[32m+[m[32m        #[arg(short = 'i', long, default_value_t = false)][m
[32m+[m[32m        info: bool,[m
[32m+[m
[32m+[m[41m        [m
     },[m
     //todo: 批量移动、压缩文件、整合文件[m
 }[m
[36m@@ -345,8 +366,19 @@[m [mfn main() {[m
             regex,[m
             pattern,[m
             wildcard,[m
[32m+[m[32m            move_to,[m
[32m+[m[32m            info,[m
[32m+[m[32m            replace,[m
         }) => {[m
[31m-            let _ = rename_command(source, target, directory, regex, pattern, wildcard);[m
[32m+[m[32m            let _ = rename_command([m
[32m+[m[32m                source,[m
[32m+[m[32m                target,[m
[32m+[m[32m                directory,[m
[32m+[m[32m                regex,[m
[32m+[m[32m                pattern,[m
[32m+[m[32m                wildcard,[m
[32m+[m[32m                move_to[m
[32m+[m[32m            );[m
         }[m
         None => {[m
             ls_command([m
[1mdiff --git a/src/rename/rename.rs b/src/rename/rename.rs[m
[1mindex bddb6f5..25a2b7e 100644[m
[1m--- a/src/rename/rename.rs[m
[1m+++ b/src/rename/rename.rs[m
[36m@@ -28,6 +28,7 @@[m [mpub fn rename_command([m
     regex: bool,[m
     pattern: bool,[m
     wildcard: bool,[m
[32m+[m[32m    move_to: Option<String>,[m
 ) -> Result<bool> {[m
     // println!("Renaming '{}' to '{}'...", source, target);[m
     // 处理流程：[m
[36m@@ -37,7 +38,13 @@[m [mpub fn rename_command([m
     // 将target中的字符串分割成变量和字符的列表[m
     // 将列表中的变量替换成具体的值，这个值如果不在组里，那就尝试从通配符或者元数据中获取l；并且处理特殊字符[m
     // 将字符和变量拼接成字符串[m
[31m-    let path_entries = Path::new(directory.as_str()).read_dir()?;[m
[32m+[m[32m    let path_entries = match Path::new(directory.as_str()).read_dir() {[m
[32m+[m[32m        std::result::Result::Ok(path_entries) => path_entries,[m
[32m+[m[32m        Err(e) => {[m
[32m+[m[32m            println!("{}", e);[m
[32m+[m[32m            return Err(anyhow!(e));[m
[32m+[m[32m        }[m
[32m+[m[32m    };[m
     let mut paths = Path::new(directory.as_str())[m
         .read_dir()?[m
         .map(|entry| {[m
[36m@@ -51,35 +58,54 @@[m [mpub fn rename_command([m
                 .to_string()[m
         })[m
         .collect::<Vec<String>>();[m
[32m+[m
[32m+[m[32m    // 通配符和模板匹配都不开启的情况，此时只需要判断source对应的文件是否存在即可[m
     if !pattern && !wildcard {[m
         if !regex {[m
             let path_entry = Path::new(source.as_str());[m
             if path_entry.exists() {[m
[31m-                return rename_single_file(&path_entry, &target);[m
[32m+[m[32m                return rename_single_file(&path_entry, &target, move_to);[m
             }[m
         } else {[m
             let re = Regex::new(&source)?;[m
             for p in path_entries {[m
                 if let std::result::Result::Ok(p) = p {[m
                     if re.is_match(p.file_name().as_os_str().to_str().unwrap())? {[m
[31m-                        return rename_single_file(&p.path(), &target);[m
[32m+[m[32m                        return rename_single_file(&p.path(), &target, move_to);[m
                     }[m
                 }[m
             }[m
         }[m
     }[m
[32m+[m
     let value_map = if pattern {[m
[32m+[m[32m        // 为模板变量赋值[m
         extract_named_groups(&mut paths, &source).unwrap_or(vec![HashMap::new(); paths.len()])[m
     } else {[m
[31m-        //todo:添加正则表达式的匹配[m
[31m-        let path_entry = Path::new(source.as_str());[m
[31m-        if path_entry.exists() {[m
[31m-            paths = vec![path_entry.file_name().unwrap().to_string_lossy().to_string()];[m
[31m-        }[m
[31m-        else{[m
[31m-            println!("Can not find the file!");[m
[32m+[m[32m        /////todo:添加正则表达式的匹配[m
[32m+[m[32m        if regex {[m
[32m+[m[32m            let path_entry = Path::new(source.as_str());[m
[32m+[m[32m            if path_entry.exists() {[m
[32m+[m[32m                paths = vec![[m
[32m+[m[32m                    path_entry[m
[32m+[m[32m                        .file_name()[m
[32m+[m[32m                        .unwrap()[m
[32m+[m[32m                        .to_string_lossy()[m
[32m+[m[32m                        .to_string(),[m
[32m+[m[32m                ];[m
[32m+[m[32m            } else {[m
[32m+[m[32m                println!("Can not find the file!");[m
                 return Err(anyhow!("Can not find the file!"));[m
[32m+[m[32m            }[m
[32m+[m[32m        } else {[m
[32m+[m[32m            let re = Regex::new(&source).unwrap();[m
[32m+[m[32m            paths = paths[m
[32m+[m[32m                .iter()[m
[32m+[m[32m                .filter(|p| re.is_match(p).unwrap())[m
[32m+[m[32m                .map(|p| p.to_string())[m
[32m+[m[32m                .collect();[m
         }[m
[32m+[m
         vec![HashMap::new()][m
     };[m
     println!("value_map: {:?}", value_map);[m
[36m@@ -88,7 +114,7 @@[m [mpub fn rename_command([m
         println!("Can not find the file!");[m
         return Err(anyhow!("Can not find the file!"));[m
     }[m
[31m-    let res = rename_batch(paths, value_map, target, wildcard);[m
[32m+[m[32m    let res = rename_batch(paths, value_map, target, wildcard, move_to);[m
     match res {[m
         std::result::Result::Ok(_) => {[m
             // println!("Rename success");[m
[36m@@ -128,34 +154,72 @@[m [mfn wait_for_yes_no() -> bool {[m
     }[m
 }[m
 [m
[31m-fn rename_single_file(path: &Path, target: &str) -> Result<bool> {[m
[32m+[m[32mfn rename_single_file(path: &Path, target: &str, move_to: Option<String>) -> Result<bool> {[m
     println!([m
         "将 '{}' 重命名为 '{}'",[m
         path.file_name().unwrap().to_string_lossy(),[m
         target.green()[m
     );[m
[32m+[m[32m    if move_to.is_some() {[m
[32m+[m[32m        let move_to_path = Path::new(move_to.as_ref().unwrap());[m
[32m+[m[32m        if !move_to_path.exists() {[m
[32m+[m[32m            println!("目标文件夹不存在: {}", move_to_path.display());[m
[32m+[m[32m            return Err(anyhow!("目标文件夹不存在: {}", move_to_path.display()));[m
[32m+[m[32m        } else {[m
[32m+[m[32m            println!("并移动到目录: {}", move_to_path.display());[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
     let yes_no = wait_for_yes_no();[m
     if yes_no {[m
         let new_path = path.with_file_name(target);[m
[31m-        std::fs::rename(path, new_path)?;[m
[32m+[m[32m        std::fs::rename(path, &new_path)?;[m
[32m+[m[32m        let move_to_path = Path::new(move_to.as_ref().unwrap()).with_file_name(target);[m
[32m+[m[32m        if move_to_path.exists() {[m
[32m+[m[32m            println!("目标文件夹已存在: {}", move_to_path.display());[m
[32m+[m[32m            return Err(anyhow!("目标文件夹已存在: {}", move_to_path.display()));[m
[32m+[m[32m        }[m
[32m+[m[32m        std::fs::copy(&new_path, move_to_path)?;[m
[32m+[m[32m        std::fs::remove_file(new_path)?;[m
         return Ok(true);[m
     }[m
     return Ok(false);[m
 }[m
 [m
[31m-fn rename_batch_files(paths: &Vec<String>, target: &Vec<String>) -> Result<bool> {[m
[32m+[m[32mfn rename_batch_files([m
[32m+[m[32m    paths: &Vec<String>,[m
[32m+[m[32m    target: &Vec<String>,[m
[32m+[m[32m    move_to: Option<String>,[m
[32m+[m[32m) -> Result<bool> {[m
     let mut success = true;[m
     println!("重命名:");[m
     for (i, path) in paths.iter().enumerate() {[m
         println!("{} -> {}", path, target[i].green());[m
     }[m
[32m+[m[32m    if move_to.is_some() {[m
[32m+[m[32m        let move_to_path = Path::new(move_to.as_ref().unwrap());[m
[32m+[m[32m        if !move_to_path.exists() {[m
[32m+[m[32m            println!("目标文件夹不存在: {}", move_to_path.display());[m
[32m+[m[32m            return Err(anyhow!("目标文件夹不存在: {}", move_to_path.display()));[m
[32m+[m[32m        } else {[m
[32m+[m[32m            println!("并移动到目录: {}", move_to_path.display());[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
     let yes_no = wait_for_yes_no();[m
     if yes_no {[m
         for (i, path) in paths.iter().enumerate() {[m
             let new_path = Path::new(path).with_file_name(&target[i]);[m
[31m-            let res = std::fs::rename(path, new_path);[m
[32m+[m[32m            let res = std::fs::rename(path, &new_path);[m
             match res {[m
[31m-                std::result::Result::Ok(_) => {}[m
[32m+[m[32m                std::result::Result::Ok(_) => {[m
[32m+[m[32m                    let move_to_path =[m
[32m+[m[32m                        Path::new(move_to.as_ref().unwrap()).with_file_name(&target[i]);[m
[32m+[m[32m                    if move_to_path.exists() {[m
[32m+[m[32m                        println!("目标文件夹已存在: {}", move_to_path.display());[m
[32m+[m[32m                        return Err(anyhow!("目标文件夹已存在: {}", move_to_path.display()));[m
[32m+[m[32m                    }[m
[32m+[m[32m                    std::fs::copy(&new_path, move_to_path)?;[m
[32m+[m[32m                    std::fs::remove_file(new_path)?;[m
[32m+[m[32m                }[m
                 std::result::Result::Err(e) => {[m
                     println!("重命名失败: {}", e);[m
                     success = false;[m
[36m@@ -179,6 +243,7 @@[m [mpub fn rename_batch([m
     value_map: Vec<HashMap<String, String>>,[m
     target: String,[m
     wildcard: bool,[m
[32m+[m[32m    move_to: Option<String>,[m
 ) -> Result<bool> {[m
     if value_map.len() != paths.len() {[m
         return Err(anyhow!("Value map length does not match paths length"));[m
[36m@@ -256,7 +321,8 @@[m [mpub fn rename_batch([m
         match part_type {[m
             0 => {[m
                 for (i, _path) in paths.iter().enumerate() {[m
[31m-                    final_paths[i].push_str(&part);[m
[32m+[m[32m                    let final_part = part.replace("\\{", "{").replace("\\{", "}");[m
[32m+[m[32m                    final_paths[i].push_str(&final_part);[m
                 }[m
             }[m
             1 => {[m
[36m@@ -305,7 +371,7 @@[m [mpub fn rename_batch([m
     // for (path, final_path) in paths.iter().zip(final_paths.iter()) {[m
     //     println!("Renaming '{}' to '{}'", path, final_path);[m
     // }[m
[31m-    rename_batch_files(&paths, &final_paths)[m
[32m+[m[32m    rename_batch_files(&paths, &final_paths, move_to)[m
 }[m
 [m
 /// 使用命名捕获组批量处理扩展正则表达式[m
[36m@@ -593,6 +659,7 @@[m [mfn process_special_symbols(sources: &Vec<String>, pattern: &String) -> Result<Ve[m
     Ok(results)[m
 }[m
 [m
[32m+[m[32m//todo: 添加file部分的元数据[m
 /// 获取元数据[m
 /// # 参数[m
 /// - `path`: 文件路径[m
